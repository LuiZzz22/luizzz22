from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy import Column, Integer, String, Float, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from passlib.context import CryptContext
from jose import JWTError, jwt
from typing import List
from datetime import datetime, timedelta

# Configurações gerais
DATABASE_URL = "sqlite:///./loja.db"  # Substitua pela URL do banco remoto
SECRET_KEY = "sua_chave_secreta"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

Base = declarative_base()
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

app = FastAPI()

# Modelos de dados
class Usuario(Base):
    __tablename__ = "usuarios"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    senha_hash = Column(String)

class Produto(Base):
    __tablename__ = "produtos"
    id = Column(Integer, primary_key=True, index=True)
    nome = Column(String, index=True)
    descricao = Column(String)
    preco = Column(Float)

# Criação do banco de dados
Base.metadata.create_all(bind=engine)

# Dependência para acessar o banco de dados
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Funções auxiliares
def gerar_senha_hash(senha: str):
    return pwd_context.hash(senha)

def verificar_senha(senha: str, senha_hash: str):
    return pwd_context.verify(senha, senha_hash)

def criar_token_acesso(data: dict, expira_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expira_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def obter_usuario_atual(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")
        if username is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Credenciais inválidas")
    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Token inválido")
    user = db.query(Usuario).filter(Usuario.username == username).first()
    if user is None:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Usuário não encontrado")
    return user

# Rotas da API
@app.post("/registrar", status_code=status.HTTP_201_CREATED)
def registrar_usuario(username: str, email: str, senha: str, db: Session = Depends(get_db)):
    senha_hash = gerar_senha_hash(senha)
    user = Usuario(username=username, email=email, senha_hash=senha_hash)
    db.add(user)
    db.commit()
    db.refresh(user)
    return {"mensagem": "Usuário registrado com sucesso"}

@app.post("/login")
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = db.query(Usuario).filter(Usuario.email == form_data.username).first()
    if not user or not verificar_senha(form_data.password, user.senha_hash):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Credenciais inválidas")
    token_acesso = criar_token_acesso(data={"sub": user.username}, expira_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    return {"token_acesso": token_acesso, "tipo_token": "bearer"}

@app.get("/produtos", response_model=List[dict])
def listar_produtos(db: Session = Depends(get_db), usuario_atual: Usuario = Depends(obter_usuario_atual)):
    produtos = db.query(Produto).all()
    return [{"id": produto.id, "nome": produto.nome, "descricao": produto.descricao, "preco": produto.preco} for produto in produtos]

@app.get("/produtos/{produto_id}", response_model=dict)
def obter_produto(produto_id: int, db: Session = Depends(get_db), usuario_atual: Usuario = Depends(obter_usuario_atual)):
    produto = db.query(Produto).filter(Produto.id == produto_id).first()
    if not produto:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Produto não encontrado")
    return {"id": produto.id, "nome": produto.nome, "descricao": produto.descricao, "preco": produto.preco}

@app.post("/produtos", status_code=status.HTTP_201_CREATED)
def criar_produto(nome: str, descricao: str, preco: float, db: Session = Depends(get_db), usuario_atual: Usuario = Depends(obter_usuario_atual)):
    produto = Produto(nome=nome, descricao=descricao, preco=preco)
    db.add(produto)
    db.commit()
    db.refresh(produto)
    return {"mensagem": "Produto criado com sucesso", "id": produto.id}

@app.put("/produtos/{produto_id}")
def atualizar_produto(produto_id: int, nome: str, descricao: str, preco: float, db: Session = Depends(get_db), usuario_atual: Usuario = Depends(obter_usuario_atual)):
    produto = db.query(Produto).filter(Produto.id == produto_id).first()
    if not produto:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Produto não encontrado")
    produto.nome = nome
    produto.descricao = descricao
    produto.preco = preco
    db.commit()
    return {"mensagem": "Produto atualizado com sucesso"}

